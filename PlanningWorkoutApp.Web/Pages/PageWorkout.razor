@page "/workout"
@inject DialogService DialogService

<RadzenButton Click="@OpenSideDialog" Text="Añadir ejercicio"></RadzenButton>
<RadzenStack Gap="2em">
    @foreach ( var e in Exercises )
    {
        <RadzenCard>
            <PlanInput Label="Ejercicio"
            Value=@e.Name
            Disabled />
            <PlanInput Label="Numero de sets" />
            <PlanInput Label="Repeticiones" />
            <PlanInput Label="Peso (kg)" />
            <RadzenButton Click="() => DeleteExercise(e)" ButtonStyle="ButtonStyle.Danger" Text="Eliminar"></RadzenButton>
        </RadzenCard>
    }
</RadzenStack>

@code {
    public List<ExerciseInWorkout<IWorkoutSet>> Exercises { get; set; } = [];

    private void DeleteExercise(ExerciseInWorkout<IWorkoutSet> exercise)
    {
        Exercises.Remove(exercise);
    }

    private async Task OpenSideDialog()
    {
        var result = await DialogService.OpenSideAsync<DialogExerciseDataPicker>("Escoje los ejercicios que quieres añadir", options: new SideDialogOptions { CloseDialogOnOverlayClick = true, Position = DialogPosition.Left, ShowMask = true });
        if ( result is List<ExerciseData> exercises )
        {
            exercises.ForEach(exerciseData =>
            {
                if ( !Exercises.Any(e => e.Name == exerciseData.Name) )
                {
                    Exercises.Add(new ExerciseInWorkout<IWorkoutSet> { Name = exerciseData.Name, Sets = [], WorkoutSetType = WorkoutSetType.Weighted });
                    
                }
            });
        }
    }
}
