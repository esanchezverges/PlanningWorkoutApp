@page "/schedule"
@namespace PlanningWorkoutApp.Web

<RadzenScheduler SlotRender=@OnSlotRender
                 style="height: 768px;"
                 TItem="@WorkoutScheduleDto"
                 Data=@workouts
                 ShowHeader=@showHeader
                 TextProperty="@(nameof(WorkoutScheduleDto.Title))"
                 StartProperty="@(nameof(WorkoutScheduleDto.Start))"
                 EndProperty="@(nameof(WorkoutScheduleDto.End))"
                 SelectedIndex="2"
                 SlotSelect=@OnSlotSelect 
                 AppointmentSelect=@OnAppointmentSelect 
                 AppointmentRender=@OnAppointmentRender 
                 AppointmentMove=@OnAppointmentMove>
    <RadzenDayView />
    <RadzenWeekView />
    <RadzenMonthView />
</RadzenScheduler>

                 @*DaySelect="@OnDaySelect"*@
@code {
    RadzenScheduler<WorkoutScheduleDto> scheduler;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    public class WorkoutScheduleDto
    {
        public string Title { get; set; }
        public string Description { get; set; }
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
    }

    bool showHeader = true;

    IList<WorkoutScheduleDto> workouts = [new() { Title = "Test", Description = "Description", End = DateTime.Now, Start = DateTime.Now }];

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: var(--rz-scheduler-highlight-background-color, rgba(255,220,40,.2));";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: var(--rz-scheduler-highlight-background-color, rgba(255,220,40,.2));";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        if (args.View.Text != "Year")
        {
            //Workout data = await DialogService.OpenAsync<AddWorkoutDialog>("Add Appointment",
                //new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });
//
            //if (data != null)
            //{
                //workouts.Add(data);
                //// Either call the Reload method or reassign the Data property of the Scheduler
                //await scheduler.Reload();
            //}
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<WorkoutScheduleDto> args)
    {
        //var copy = new WorkoutScheduleDto
        //{
            //Title = args.Data.Title,
            //Description = args.Data.Description,
        //};

        //var data = await DialogService.OpenAsync<EditWorkoutDialog>("Edit Appointment", new Dictionary<string, object> { { "Appointment", copy } });

        //if (data != null)
        //{
            // Update the appointment
            //args.Data.Title = data.Title;
            //args.Data.Description = data.Description;
        //}

        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<WorkoutScheduleDto> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        //if (args.Data.Title == "Birthday")
        //{
            //args.Attributes["style"] = "background: red";
        //}
    }

    async Task OnAppointmentMove(SchedulerAppointmentMoveEventArgs args)
    {
        var draggedAppointment = workouts.FirstOrDefault(x => x == args.Appointment.Data);

        if (draggedAppointment != null)
        {
            //var duration = draggedAppointment.End - draggedAppointment.Start;

            if (args.SlotDate.TimeOfDay == TimeSpan.Zero)
            {
                //draggedAppointment.Start = args.SlotDate.Date.Add(draggedAppointment.Start.TimeOfDay);
            }
            else
            {
                //draggedAppointment.Start = args.SlotDate;
            }

            //draggedAppointment.End = draggedAppointment.Start.Add(duration);

            await scheduler.Reload();
        }
    }
}
