@namespace PlanningWorkoutApp.Web
@inject DialogService DialogService

<RadzenStack>
    <PlanInput Label="Buscador" />
</RadzenStack>
<RadzenStack Gap="2em">
    @foreach ( var e in exerciseDatas )
    {
        <RadzenRow>
            <RadzenCard>
                <ChildContent>
                    <div class="rd-d-flex">
                        <h3>@e.Name</h3>
                        @if ( !IsExerciseAdded(e) )
                        {
                            <RadzenButton Click="@(() => AddExercise(e))" Text="Añadir" />
                        }
                        else
                        {
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Click="@(() => DeleteExercise(e))" Text="Eliminar" />
                        }
                    </div>
                    <p>@e.Description</p>
                    <RadzenImage Path="@e.ImageUrl" Style="max-width: 100%;" />
                </ChildContent>
            </RadzenCard>
        </RadzenRow>
    }
</RadzenStack>
<div class="fix-bottom">
    <RadzenButton Click="@(() => CloseDialog())" Text="Confirmar"></RadzenButton>
</div>
@code {
    public List<ExerciseData> exerciseDatas { get; set; } = new List<ExerciseData>
    {
        new ExerciseData
        {
            Name = "Push Up",
            Description = "A basic bodyweight exercise that targets the chest, shoulders, and triceps.",
            BodyPart = "Chest",
            Equipment = "None",
            TargetMuscle = "Pectorals",
            ImageUrl = "https://example.com/pushup.jpg",
            VideoUrl = "https://example.com/pushup.mp4"
        },
        new ExerciseData
        {
            Name = "Squat",
            Description = "A fundamental lower body exercise that works the quadriceps, hamstrings, and glutes.",
            BodyPart = "Legs",
            Equipment = "None",
            TargetMuscle = "Quadriceps",
            ImageUrl = "https://example.com/squat.jpg",
            VideoUrl = "https://example.com/squat.mp4"
        },
        new ExerciseData
        {
            Name = "Deadlift",
            Description = "A compound exercise that targets the back, glutes, and hamstrings.",
            BodyPart = "Back",
            Equipment = "Barbell",
            TargetMuscle = "Hamstrings",
            ImageUrl = "https://example.com/deadlift.jpg",
            VideoUrl = "https://example.com/deadlift.mp4"
        },
        new ExerciseData
        {
            Name = "Plank",
            Description = "An isometric core exercise that strengthens the abdominal muscles.",
            BodyPart = "Core",
            Equipment = "None",
            TargetMuscle = "Abdominals",
            ImageUrl = "https://example.com/plank.jpg",
            VideoUrl = "https://example.com/plank.mp4"
        },
        new ExerciseData
        {
            Name = "Pull Up",
            Description = "An upper body exercise that primarily targets the back and biceps.",
            BodyPart = "Back",
            Equipment = "Pull-up Bar",
            TargetMuscle = "Latissimus Dorsi",
            ImageUrl = "https://example.com/pullup.jpg",
            VideoUrl = "https://example.com/pullup.mp4"
        },
        new ExerciseData
        {
            Name = "Lunges",
            Description = "A lower body exercise that targets the quadriceps, hamstrings, and glutes.",
            BodyPart = "Legs",
            Equipment = "None",
            TargetMuscle = "Glutes",
            ImageUrl = "https://example.com/lunges.jpg",
            VideoUrl = "https://example.com/lunges.mp4"
        },
        new ExerciseData
        {
            Name = "Bench Press",
            Description = "A compound exercise that targets the chest, shoulders, and triceps using a barbell.",
            BodyPart = "Chest",
            Equipment = "Barbell",
            TargetMuscle = "Pectorals",
            ImageUrl = "https://example.com/benchpress.jpg",
            VideoUrl = "https://example.com/benchpress.mp4"
        }
    };
    public List<ExerciseData> AddedExercises { get; set; } = new List<ExerciseData>();

    public void AddExercise(ExerciseData exercise)
    {
        AddedExercises.Add(exercise);
    }

    public void DeleteExercise(ExerciseData exercise)
    {
        AddedExercises.RemoveAll(e => e.Name == exercise.Name);
    }

    public bool IsExerciseAdded(ExerciseData exercise)
    {
        return AddedExercises.Any(e => e.Name == exercise.Name);
    }

    public void CloseDialog()
    {
        DialogService.CloseSide(AddedExercises);
    }
}

<style>
  .fix-bottom{
    position: fixed;
    bottom: 0;
    left: 0;
    text-align: center;
    padding: 10px;
    z-index: 1000; 
  }
</style>
